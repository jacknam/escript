#!/bin/bash
#
# usage enodejs start|reload|stop|reset|enable|disable|status|check
# developed by jacknam@ellucy.com
#
command="$1"
ENODEJS_VER="12"
ENODEJS_PATH="/etc/enodejs"
ENODEJS_HOME="$ENODEJS_PATH/.pm2"
ENODEJS_LIST="$ENODEJS_PATH/service.list"
ENODEJS_USER="www-data"
pm2_exec=""
current_status=""
command_notice=" Use 'enodejs' as command instead of 'pm2'"

if [ $(id -u) -ne 0 ]; then
 echo "Please run as root"
 exit 1
fi

check_internet() {
 if ip route 2>/dev/null | grep -q default; then
  nc -zw1 1.1.1.1 53 >/dev/null 2>&1 && return 0
 fi
 return 1
}

is_num() {
 local num="$1"
 [ "$num" -ge 0 ] 2>/dev/null && return 0
 return 1
}

install_confirm() {
 if ! check_internet; then
  return 1
 fi

 local target="$1"
 local confirm="Would you like to install ${target}? [(y)es/(n)o]: "

 read -t 5 -p "$confirm" answer
 if [ "$answer" = "y" ]; then
  echo "Now installing..."
  return 0
 else
  echo
  echo "Installation cancelled"
  return 1
 fi

 return 1
}

install_nodejs() {
 if ! install_confirm "nodejs and npm"; then
  return 1
 fi

 curl -sL https://deb.nodesource.com/setup_${ENODEJS_VER}.x | bash - 2>/dev/null
 if [ -f "/etc/apt/sources.list.d/nodesource.list" ]; then
  apt-get update && apt-get install -y nodejs
  if [ -n "$(nodejs -v 2>/dev/null)" ] && [ -n "$(npm -v 2>/dev/null)" ]; then
   return 0
  fi
 fi
 return 1
}

install_pm2() {
 if ! install_confirm "pm2"; then
  return 1
 fi

 npm install pm2@latest -g && return 0
 return 1
}

status() {
 ${pm2_exec} list
 echo "$command_notice"
 return 0
}

init() {
 if [ -z "$command" ]; then
  echo "enodejs v0.1"
  exit 0
 elif [ "$command" = "check" ]; then
  local nodejs_ver=$(nodejs -v 2>/dev/null)
  local npm_ver=$(npm -v 2>/dev/null)
  local pm2_ver=$(pm2 -v 2>/dev/null)

  if [ -n "$nodejs_ver" ] && [ -n "$npm_ver" ] && [ -n "$pm2_ver" ]; then
   echo "nodejs version: $nodejs_ver"
   echo "npm version: $npm_ver"
   echo "pm2 version: $pm2_ver"
  else
   echo "enodejs is not currentlly installed"
  fi
  exit 0
 fi

 if ! which nodejs >/dev/null 2>&1; then
  echo "You need to install nodejs and npm first."
  install_nodejs || return 1
 fi

 if ! which pm2 >/dev/null 2>&1; then
  echo "You need to install pm2 using npm. Now installing it..."
  install_pm2 || return 1
 fi

 [ ! -f "$ENODEJS_PATH" ] && mkdir -p "$ENODEJS_PATH"
 if [ ! -f "$ENODEJS_HOME" ]; then
  PM2_HOME=$ENODEJS_HOME pm2 list >/dev/null 2>&1
 fi

 if [ "$(stat "$ENODEJS_HOME" 2>/dev/null | grep "^Access.*(.*)$" | awk -F"[(/)]" '{ print $2, $6, $9; }' | tr -d ' ')" != "0770rootwww-data" ]; then
  chmod -R 770 "$ENODEJS_HOME"
  chown -R root:www-data "$ENODEJS_HOME"
 fi

 find $ENODEJS_HOME -gid 0 -exec chgrp www-data {} \;
 find $ENODEJS_HOME -type f ! -perm -g+w -exec chmod g+w {} \;

 if [ -n "$ENODEJS_USER" ]; then
  if [ -z "$(id -u $ENODEJS_USER 2>/dev/null)" ]; then
   ENODEJS_USER=""
  else
   pm2_exec="sudo -u $ENODEJS_USER PM2_HOME=$ENODEJS_HOME pm2"
  fi
 fi

 if [ -z "$ENODEJS_USER" ]; then
  pm2_exec="PM2_HOME=$ENODEJS_HOME pm2"
 fi

 return 0
}

get_status() {
 current_status=$(${pm2_exec} list | grep "^│ " | tail +2 | awk -F'│' 'function trim(field){ gsub(/^ +| +$/,"", field); return field; }{ print trim($3), trim($5), trim($12), trim($7), trim($2); }')
 return 0
}

start() {
 local mode=$(echo "$1" | egrep "^(start|reload|boot)$")
 [ -z "$mode" ] && return 1

 if [ "$mode" = "boot" ]; then
  local dump_file="$ENODEJS_HOME/dump.pm2"
  if [ -f "$dump_file" ]; then
   if ${pm2_exec} resurrect >/dev/null 2>&1; then
    return 0
   fi
  fi
 fi

 get_status

 local target="$2"
 if [ -n "$target" ]; then
  if [ -n "$current_status" ]; then
   local filter=$([ "$mode" = "reload" ] && echo "_NOONLINEFILTER_" || echo "online")
   local filter_status=$(echo "$current_status" | grep -v "$filter")
   if [ -n "$filter_status" ]; then
    if is_num "$target"; then
     filter_status=$(echo "$filter_status" | awk '{ print $1; }')
    else
     filter_status=$(echo "$filter_status" | cut -d" " -f5-)
    fi
    if echo "$filter_status" | grep -q "^${target}$"; then
     if [ "$mode" = "reload" ]; then
      ${pm2_exec} reload "$target" >/dev/null 2>&1
     else
      ${pm2_exec} start "$target" >/dev/null 2>&1
     fi
    fi
   fi
  fi

  status
  return 0
 fi

 [ ! -f "$ENODEJS_LIST" ] && return 1
 local services=$(cat "$ENODEJS_LIST" 2>/dev/null | grep -v "^\s*[#;]" | grep -v "^[[:space:]]*$")
 [ -z "$services" ] && return 1

 local path=""
 local cluster=""
 local name=""
 local index=""
 while read -r line; do
  line=( $line )
  index="${line[0]}"
  [ ! -f "$index" ] && continue
  path=$(echo "$index" | rev | cut -d"/" -f2- | rev)

  cluster=""
  name=""
  if [ -n "${line[1]}" ]; then
   cluster=$(echo "${line[1]}" | grep -oE "^[0-9]{1}$")
   if [ -z "$cluster" ]; then
    name="${line[@]: 1}"
   else
    name="${line[@]: 2}"
   fi

   if [ -n "$name" ]; then
    name=$(echo "$name" | xargs)
   fi
  fi

  [ -z "$cluster" ] && cluster="1"
  [ -z "$name" ] && name=$(echo "$index" | rev | cut -d"/" -f1-2 | rev | sed "s/\//-/g")

  if [ -n "$current_status" ]; then
   if echo "$current_status" | grep -q " ${name}$"; then
    if [ "$mode" = "reload" ]; then
     ${pm2_exec} delete "$name" >/dev/null 2>&1
    else
     continue
    fi
   fi
  fi

  ${pm2_exec} start "$index" --name "$name" -o "$path/console.log" -e "$path/error.log" --merge-logs -i ${cluster} >/dev/null 2>&1
 done <<< "$services"

 status
 return 0
}

stop() {
 local mode=$(echo "$1" | egrep "^(stop|delete|kill)$")
 [ -z "$mode" ] && return 1

 get_status
 [ -z "$current_status" ] && return 0

 if [ "$mode" = "kill" ]; then
  ${pm2_exec} save
  ${pm2_exec} kill
  return 0
 fi

 local target="$2"
 if [ -z "$target" ] || [ "$target" = "all" ]; then
  ${pm2_exec} ${mode} all >/dev/null 2>&1
 else
  local filter_status=""
  if is_num "$target"; then
   filter_status=$(echo "$current_status" | awk '{ print $1; }')
  else
   filter_status=$(echo "$current_status" | cut -d" " -f5-)
  fi
  if echo "$filter_status" | grep -q "^${target}$"; then
   ${pm2_exec} ${mode} "$target" >/dev/null 2>&1
  fi
 fi

 status
 return 0
}

service() {
 local mode=$(echo "$1" | egrep "^(add|remove|update)$")
 [ -z "$mode" ] && return 1

 local args=( "${@:2}" )
 local index="${args[0]}"
 [ -z "$index" ] && return 1

 local f_index="${index:0:1}"
 if [ "$f_index" = "." ]; then
  index="$PWD/index.js"
 elif [ "$f_index" != "/" ]; then
  index="$PWD/$index"
 fi

 if [ "${index: -3}" != ".js" ] || [ ! -f "$index" ]; then
  echo "$index is wrong js file. Please check the js file and try again."
  return 1
 fi
 local services=$(cat "$ENODEJS_LIST" 2>/dev/null)
 local exist=$(echo "$services" | grep "^${index}" | head -1)
 local name=""
 if [ "$mode" = "remove" ]; then
  if [ -n "$exist" ]; then
   name=$(echo "$exist" | cut -d" " -f3-)
   [ -z "$name" ] && name=$(echo "$index" | rev | cut -d"/" -f1-2 | rev | sed "s/\//-/g")
   echo "$services" | grep -v "^${index}" > "$ENODEJS_LIST"
   ${pm2_exec} delete "$name" >/dev/null 2>&1
  else
   echo "could not find service remove"
   return 1
  fi
 elif [ "$mode" = "add" ]; then
  if [ -n "$exist" ]; then
   echo "service already exists"
   return 1
  else
   local cluster=""
   if [ -n "${args[1]}" ]; then
    cluster=$(echo "${args[1]}" | grep -oE "^[0-9]{1}$")
    if [ -z "$cluster" ]; then
     name="${args[@]: 1}"
    else
     name="${args[@]: 2}"
    fi
   fi
   [ -z "$cluster" ] && cluster="1"
   [ -z "$name" ] && name=$(echo "$index" | rev | cut -d"/" -f1-2 | rev | sed "s/\//-/g")
   echo "$index $cluster $name" >> "$ENODEJS_LIST"
   local path=$(echo "$index" | rev | cut -d"/" -f2- | rev)
   ${pm2_exec} start "$index" --name "$name" -o "$path/console.log" -e "$path/error.log" --merge-logs -i ${cluster} >/dev/null 2>&1
  fi
 elif [ "$mode" = "update" ]; then
  if [ -n "$exist" ]; then
   local result=""
   if service remove "$index"; then
    if service add "$index" "${@:3}"; then
     result="true"
    fi
   fi
   if [ "$result" = "true" ]; then
    echo "successfully updated. enodejs service list is as follows;"
    cat "$ENODEJS_LIST"
   fi
  else
   echo "could not find service to update"
   return 1
  fi
 fi

 if [ "$command" != "update" ]; then
  echo "successfully ${mode}ed. enodejs service list is as follows;"
  cat "$ENODEJS_LIST"
 fi

 return 0
}

system_daemon() {
 local mode="$1"
 local systemd_file="/lib/systemd/system/enodejs.service"
 if [ ! -f "$systemd_file" ]; then
cat << EOF > "$systemd_file"
[Unit]
Description=Ellucy nodejs startup
DefaultDependencies=no

Wants=nginx.service
After=local-fs.target network.target nginx.service

Conflicts=shutdown.target
Before=shutdown.target

[Service]
Type=oneshot
RemainAfterExit=yes
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity
ExecStart=/usr/local/sbin/enodejs boot
ExecReload=/usr/local/sbin/enodejs reload
ExecStop=/usr/local/sbin/enodejs shutdown

[Install]
WantedBy=multi-user.target
EOF
  chmod 644 "$systemd_file"
  systemctl daemon-reload
 fi

 if [ "$mode" = "enable" ]; then
  systemctl enable enodejs.service >/dev/null 2>&1
  echo "enodejs enabled at boot"
 else
  systemctl disable enodejs.service >/dev/null 2>&1
  echo "enodejs disabled at boot"
 fi

 return 0
}

init || exit 1;
case "$command" in
 add)
  service add "${@:2}"
  ;;
 remove)
  service remove "${@:2}"
  ;;
 update)
  service update "${@:2}"
  ;;
 start)
  start start "${@:2}"
  ;;
 reload)
  start reload "${@:2}"
  ;;
 stop)
  stop stop "${@:2}"
  ;;
 reset)
  stop delete "${@:2}"
  ;;
 enable)
  system_daemon enable
  ;;
 disable)
  system_daemon disable
  ;;
 status)
  status
  ;;
 boot)
  start boot
  ;;
 shutdown)
  stop kill
  ;;
 *)
  if echo "$command" | egrep -q "^(show|list|resurrect|restart|describe|kill)$"; then
   ${pm2_exec} ${command} "${@:2}"
   echo "$command_notice"
  elif echo "$command" | egrep -q "^(jlist|prettylist|env|save|dump|logs|flush|reloadLogs|monit)$"; then
   ${pm2_exec} ${command} "${@:2}"
  else
   echo "Error: Command not found. (usage: enodejs start|reload|stop|reset|enable|disable|status|check)"
   exit 1
  fi
esac

exit 0
